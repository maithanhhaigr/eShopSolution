Lession 1:
- Introdure
- forum.tedu.com.vn
- Git link: https://github.com/teduinternational/eshopsolution

Lession 2:
- Install

Lession 3:
- Create blank solution (asp.net core 3.1)
- Create simple Application end run
- Indouction about solution
- Create GIT repository and push

Lession 4:
- Create branh for GIT
- Git flow: master -> develop -> feature/solution_foler --> create pull request to devolop --> bugfix/fix_error_start --> create pull request to devolop
- Solution structure
	+> N layer (Data, Business, presentation) - Data driven design
	+> DDD (Domain driven design)
- Web appliction -Request piline
- Git branches: develop, feature/create_solution_structure

Lession 5:
- Design funtion

Lession 6:
- Design Database (excel)

Lession 7:
- Design Database (code)
- Config Alias
	+> Data Attribute configuration
	+> Fluent API configuration (user)
- Create Entities on code
- Git branches: feature/database_design
- https://docs.microsoft.com/en-us/ef/core/get-started/install/
- Package:
	+> Microsoft.EntityFrameworkCore.SqlServer
	+> Microsoft.EntityFrameworkCore.Design
	+> Microsoft.EntityFrameworkCore.Tools

Lession 8:
- Configuration Entity by Fluent API configuration
- Fluent API configuration (use)
- https://www.learnentityframeworkcore.com/configuration/fluent-api

Lesstion 9:
- Migration database (IDesignTime Services)
- add-migration / update-database / remove-migration
- https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/dbcontext-creation
- Config create migration (Design-Time DbContext createion)
- Parkage: 
	+> Microsoft.Extentions.Configuration.FileExtensions
	+> Microsoft.Extentions.Configuration.Json

Lession 10:
- Data Seeding
- https://docs.microsoft.com/en-us/ef/core/modeling/data-seeding
- Git branches: feature/data_seeding

Lession 11:
- AspNetCore Identity Database
- Git branches: feature/identity_database
- Package: 
	+> Microsoft.AspNetCore.Identity.EntityFrameworkCore

Lession 12:
- Create Application struction
- SOLID: Dependency Inverse -> Dependency Injection
- Git branched: feature/application_layer

Lession 13:
- Search and Paging
- Create Customer Exception

Lession 14:
- Method - Update, Delete

Lession 15:
- Create Table ProductImage

Lession 16:
- Image Manager (File manager)

Lession 17:
- Create BackendApi (MVC)
- Learn Rest, RestFull

Lession 18:
- Package:
	+> Swargger (Swashbuckle.AspNetCore.Swagger)
- http://bekenty.com/

Lession 19:
- Git branhes: feature/product_apis
- Instructue Project
- Create RESTfull API for Product
- Add, Update, Delete Product
- languageId
- Test by swagger

Lession 20:
- Best RESTfull API

Lession 21:
- Login jwt
- Add Extention CodeMaid (auto format code)
- install ...Model.Tokens

Lession 22:
- Install ...JwtBearer
- Protected Api Swagger

Lession 23:
- Validate ViewModel
- https://docs.fluentvalidation.net/en/latest/aspnet.html
- search: asp.net core life cycle

Lession 24:
- Git branches: feature/admin_app
- create web admin (Asp.Net Core MVC)
- https://startbootstrap.com/ (download template)

Lession 25:
- Git branches: develop
- Login (admin / Abcd1234$)
- https error because yet configuration certificate on server kertrel
- Parkage:
	+> Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation
	+> FluentValidation.AspNetCore

Lession 26:
- Git branches: feature/26_cookie_authentication_without_identity
- Cookie Authentication without ASP.NET Identity

Lession 27:
- Get list user
- Git branches: devolop
- Learn (tedu 35)






